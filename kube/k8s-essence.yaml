apiVersion: v1
kind: Namespace
metadata:
  name: essence
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: essence-backend-service-account
  namespace: essence
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: essence-backend-pod-reader
  namespace: essence
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: essence-role-view
  namespace: essence
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: essence-backend-pod-reader
subjects:
- kind: ServiceAccount
  name: essence-backend-service-account
  namespace: essence
---
apiVersion: v1
kind: Secret
metadata:
  name: essence-secret
  namespace: essence
type: Opaque
data:
  super_admin_user: c19zdQ==
  super_admin_password: c19zdQ==
  super_admin_db: c19zdQ==
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: essence-store-module-pv
  namespace: essence
  labels:
    type: local
spec:
  storageClassName: module-essence
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/module_essence"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: essence
  name: essence-store-module-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: module-essence
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: essence-store-config-pv
  namespace: essence
  labels:
    type: local
spec:
  storageClassName: config-essence
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/config_essence"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: essence
  name: essence-store-config-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  storageClassName: config-essence
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: essence-store-pg-data-pv
  namespace: essence
  labels:
    type: local
spec:
  storageClassName: pg-data
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/pg_data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: essence
  name: essence-store-pg-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: pg-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: essence
  name: essence-backend-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: essence-backend-db
  template:
    metadata:
      namespace: essence
      labels:
        app: essence-backend-db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_db
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_user
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          image: postgres:11-alpine
          imagePullPolicy: ""
          name: essence-backend-db
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: essence-store-pg-data-pvc
      restartPolicy: Always
      volumes:
        - name: essence-store-pg-data-pvc
          persistentVolumeClaim:
            claimName: essence-store-pg-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  namespace: essence
  name: essence-backend-db
spec:
  ports:
    - name: "5432"
      port: 5432
  selector:
    app: essence-backend-db
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: essence
  name: essence-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: essence-backend
  strategy:
    type: Recreate
  template:
    metadata:
      namespace: essence
      labels:
        app: essence-backend
    spec:
      serviceAccountName: essence-backend-service-account
      securityContext:
        fsGroup: 1001
      containers:
        - env:
            - name: POSTGRES_ADMIN_DATABASE
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_db
            - name: POSTGRES_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_password
            - name: POSTGRES_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: essence-secret
                  key: super_admin_user
            - name: POSTGRES_HOST
              value: $(ESSENCE_BACKEND_DB_SERVICE_HOST)
            - name: POSTGRES_PORT
              value: $(ESSENCE_BACKEND_DB_SERVICE_PORT)
            - name: KUBERNETES_NAMESPACE
              value: essence
          image: essencecommunity/essence-backend:dev
          imagePullPolicy: "Always"
          name: essence-backend
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /kube/liveness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /kube/startup
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 1
            timeoutSeconds: 5
            failureThreshold: 60
          readinessProbe:
            httpGet:
              path: /kube/readiness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - mountPath: /opt/work_gate/module
              name: essence-store-module-pvc
            - mountPath: /opt/work_gate/config
              name: essence-store-config-pvc
            - mountPath: /opt/work_gate/tmp
              name: essence-cache-volume
            - mountPath: /opt/work_gate/logs
              name: essence-log-volume
      restartPolicy: Always
      volumes:
        - name: essence-cache-volume
          emptyDir:
            sizeLimit: 1000Mi
        - name: essence-log-volume
          emptyDir:
            sizeLimit: 1000Mi
        - name: essence-store-module-pvc
          persistentVolumeClaim:
            claimName: essence-store-module-pvc
        - name: essence-store-config-pvc
          persistentVolumeClaim:
            claimName: essence-store-config-pvc
---
apiVersion: v1
kind: Service
metadata:
  namespace: essence
  name: essence-backend
spec:
  ports:
    - name: "8080"
      port: 8080
  selector:
    app: essence-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: essence
  name: essence-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: essence-frontend
  strategy:
    type: Recreate
  template:
    metadata:
      namespace: essence
      labels:
        app: essence-frontend
    spec:
      securityContext:
          fsGroup: 101
      containers:
        - env:
            - name: ESSENCE_BACKEND_HOST
              value: $(ESSENCE_BACKEND_SERVICE_HOST)
            - name: ESSENCE_BACKEND_PORT
              value: $(ESSENCE_BACKEND_SERVICE_PORT)
          image: essencecommunity/essence-frontend:dev
          imagePullPolicy: "Always"
          name: essence-frontend
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /liveness
              port: 10080
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /startup
              port: 10080
            initialDelaySeconds: 1
            periodSeconds: 1
            timeoutSeconds: 5
            failureThreshold: 60
          readinessProbe:
            httpGet:
              path: /readiness
              port: 10080
            initialDelaySeconds: 45
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - mountPath: /opt/module
              name: essence-store-module-pvc
      restartPolicy: Always
      volumes:
        - name: essence-store-module-pvc
          persistentVolumeClaim:
            claimName: essence-store-module-pvc
---
apiVersion: v1
kind: Service
metadata:
  namespace: essence
  name: essence-frontend
spec:
  ports:
    - name: "8080"
      port: 8080
  selector:
    app: essence-frontend
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: essence
  name: essence-frontend-ingress
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: essence-frontend
            port:
              number: 8080
